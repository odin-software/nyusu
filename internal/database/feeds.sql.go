// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (name, url, description, image_url, image_text, language, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, url, user_id, created_at, updated_at, last_fetched_at, description, image_url, image_text, language
`

type CreateFeedParams struct {
	Name        string         `json:"name"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	ImageUrl    sql.NullString `json:"image_url"`
	ImageText   sql.NullString `json:"image_text"`
	Language    sql.NullString `json:"language"`
	UserID      int64          `json:"user_id"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.Name,
		arg.Url,
		arg.Description,
		arg.ImageUrl,
		arg.ImageText,
		arg.Language,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Description,
		&i.ImageUrl,
		&i.ImageText,
		&i.Language,
	)
	return i, err
}

const createFeedFollows = `-- name: CreateFeedFollows :one
INSERT INTO feed_follows (user_id, feed_id)
VALUES (?, ?)
RETURNING id, user_id, feed_id, created_at, updated_at, "foreign"
`

type CreateFeedFollowsParams struct {
	UserID int64 `json:"user_id"`
	FeedID int64 `json:"feed_id"`
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Foreign,
	)
	return i, err
}

const deleteFeedFollows = `-- name: DeleteFeedFollows :exec
DELETE FROM feed_follows
WHERE id = ?
`

func (q *Queries) DeleteFeedFollows(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollows, id)
	return err
}

const getAllFeedFollowsByEmail = `-- name: GetAllFeedFollowsByEmail :many
SELECT f.id, f."name", f.url, f.description, f.created_at, ff.id
FROM feed_follows ff
INNER JOIN feeds f ON ff.feed_id = f.id
INNER JOIN users u ON ff.user_id = u.id
WHERE u.email = ?
LIMIT ?
OFFSET ?
`

type GetAllFeedFollowsByEmailParams struct {
	Email  string `json:"email"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

type GetAllFeedFollowsByEmailRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	CreatedAt   int64          `json:"created_at"`
	ID_2        int64          `json:"id_2"`
}

func (q *Queries) GetAllFeedFollowsByEmail(ctx context.Context, arg GetAllFeedFollowsByEmailParams) ([]GetAllFeedFollowsByEmailRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedFollowsByEmail, arg.Email, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedFollowsByEmailRow
	for rows.Next() {
		var i GetAllFeedFollowsByEmailRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Description,
			&i.CreatedAt,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFeeds = `-- name: GetAllFeeds :many
SELECT id, name, url
FROM feeds
LIMIT ?
OFFSET ?
`

type GetAllFeedsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetAllFeedsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

// FEEDS TABLE
func (q *Queries) GetAllFeeds(ctx context.Context, arg GetAllFeedsParams) ([]GetAllFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedsRow
	for rows.Next() {
		var i GetAllFeedsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedFollows = `-- name: GetFeedFollows :one
SELECT id
FROM feed_follows
WHERE feed_id = ? AND user_id = ?
`

type GetFeedFollowsParams struct {
	FeedID int64 `json:"feed_id"`
	UserID int64 `json:"user_id"`
}

// FEED FOLLOWS TABLE
func (q *Queries) GetFeedFollows(ctx context.Context, arg GetFeedFollowsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollows, arg.FeedID, arg.UserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getFeedFollowsFromUser = `-- name: GetFeedFollowsFromUser :many
SELECT id, user_id, feed_id
FROM feed_follows
WHERE user_id = ?
`

type GetFeedFollowsFromUserRow struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
	FeedID int64 `json:"feed_id"`
}

func (q *Queries) GetFeedFollowsFromUser(ctx context.Context, userID int64) ([]GetFeedFollowsFromUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsFromUserRow
	for rows.Next() {
		var i GetFeedFollowsFromUserRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.FeedID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedsToFetch = `-- name: GetNextFeedsToFetch :many
SELECT id, name, url
FROM feeds
ORDER BY last_fetched_at ASC
LIMIT ?
`

type GetNextFeedsToFetchRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) GetNextFeedsToFetch(ctx context.Context, limit int64) ([]GetNextFeedsToFetchRow, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNextFeedsToFetchRow
	for rows.Next() {
		var i GetNextFeedsToFetchRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds
SET
	last_fetched_at = unixepoch(),
	updated_at = unixepoch()
WHERE id = ?
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
