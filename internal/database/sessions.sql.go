// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (token, user_id, expires_at)
VALUES (?, ?, ?)
RETURNING id, token, user_id, created_at, expires_at
`

type CreateSessionParams struct {
	Token     string `json:"token"`
	UserID    int64  `json:"user_id"`
	ExpiresAt int64  `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Token, arg.UserID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at <= unixepoch()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM sessions
WHERE user_id = ?
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT s.id, s.token, s.user_id, s.created_at, s.expires_at,
       u.id, u.name, u.email, u.password, u.created_at, u.updated_at
FROM sessions s
INNER JOIN users u ON s.user_id = u.id
WHERE s.token = ? AND s.expires_at > unixepoch()
`

type GetSessionByTokenRow struct {
	ID          int64  `json:"id"`
	Token       string `json:"token"`
	UserID      int64  `json:"user_id"`
	CreatedAt   int64  `json:"created_at"`
	ExpiresAt   int64  `json:"expires_at"`
	ID_2        int64  `json:"id_2"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	CreatedAt_2 int64  `json:"created_at_2"`
	UpdatedAt   int64  `json:"updated_at"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt_2,
		&i.UpdatedAt,
	)
	return i, err
}
